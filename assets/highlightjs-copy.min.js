/*
 * This is a modified version of 'highlightjs-copy' to work with Gradio
 * https://raw.githubusercontent.com/arronhunt/highlightjs-copy/master/dist/highlightjs-copy.min.js
 */
class CopyButtonPlugin {
  constructor(options = {}) {
    self.hook = options.hook
    self.callback = options.callback
    self.lang = options.lang || document.documentElement.lang || "en"
  }
  "after:highlightElement"({ el, text }) {
    let button = Object.assign(document.createElement("button"), {
      innerHTML: locales[lang]?.[0] || "Copy",
      className: "hljs-copy-button",
    })
    button.dataset.copied = false
    el.parentElement.classList.add("hljs-copy-wrapper")
    // Check if code block height is not enough for the copy button to fit, then add class to fix
    if (el.parentElement.offsetHeight < 42) el.parentElement.classList.add("hljs-copy-narrow")
    el.parentElement.appendChild(button)
    /* el.parentElement.style.setProperty(
      "--hljs-theme-background",
      window.getComputedStyle(el).backgroundColor
    ) */
    button.onclick = function () {
      if (!navigator.clipboard) {
        // Some browsers (for example on Android) require an HTTPS connection for the clipboard function to work
        // so this won't work on a local URL unless we use the Gradio HTTPS link with --share
        // TODO: Warn user if copy when clicking button fails
        return
      }
      let newText = text
      if (hook && typeof hook === "function") {
        newText = hook(text, el) || text
      }
      navigator.clipboard
        .writeText(newText)
        .then(function () {
          button.innerHTML = locales[lang]?.[1] || "Copied!"
          button.dataset.copied = true
          let alert = Object.assign(document.createElement("div"), {
            role: "status",
            className: "hljs-copy-alert",
            innerHTML: locales[lang]?.[2] || "Copied to clipboard",
          })
          alert.setAttribute("style", "clip: rect(0 0 0 0) !important; clip-path: inset(50%) !important; height: 1px !important; overflow: hidden !important; position: absolute !important; white-space: nowrap !important; width: 1px !important;")
          el.parentElement.appendChild(alert)
          // TODO: Reset previous timeout on new button press
          setTimeout(() => {
            button.innerHTML = locales[lang]?.[0] || "Copy"
            button.dataset.copied = false
            // Remove focus from button so it hides again
            button.blur()
            el.parentElement.removeChild(alert)
            alert = null
          }, 2000)
        })
        .then(function () {
          if (typeof callback === "function")
            return callback(newText, el)
        })
    }
  }
}
const locales = { en: ["Copy", "Copied!", "Copied to clipboard"] }
